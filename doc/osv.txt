one-small-step-for-vimkind             *one-small-step-for-vimkind* *osv*

|one-small-step-for-vimkind| (osv) is an adapter for Lua running inside Neovim.
It will allow you to:

  * Debug Lua scripts
  * Debug a running component inside Neovim (like a plug-in)
  * Debug Neovim internal Lua scripts

In order to use |one-small-step-for-vimkind|, you will need a DAP client.
You can choose between two alternatives which are:

  nvim-dap: https://github.com/mfussenegger/nvim-dap
  vimspector: https://github.com/puremourning/vimspector

|one-small-step-for-vimkind| was mainly developed with nvim-dap which
is the one recommended.

                                  Type |gO| to the table of contents.

=========================================================================
nvim-dap                                                        *osv-dap*

Please refer to |dap-adapter| and |dap-configuration| to learn about nvim-dap
configurations.

The following configuration will allow you to attach a nvim-dap
client to |osv|.
>lua
    local dap = require"dap"
    dap.configurations.lua = {
      {
        type = 'nlua',
        request = 'attach',
        name = "Attach to running Neovim instance",
      }
    }

    dap.adapters.nlua = function(callback, config)
      callback({ type = 'server', host = config.host or "127.0.0.1", port = config.port or 8086 })
    end
<

QUICKSTART

The following steps will guide you through the process of starting a debug
session using nvim-dap.

Let's say you have a lua script `myscript.lua` in your home directory that has
the following content: >lua

    print("start")
    for i = 1, 10 do
      print(i)
    end
    print("end")
<
1. Open a Neovim instance (instance A)
2. Launch the DAP server with (A) >vim
    :lua require"osv".launch({port=8086})
3. Open another Neovim instance (instance B)
4. Open `myscript.lua` (B)
5. Place a breakpoint on line 2 using (B) >vim
    :lua require"dap".toggle_breakpoint()
6. Connect the DAP client using (B) >vim
    :lua require"dap".continue()
7. Run `myscript.lua` in the other instance (A) >vim
    :luafile myscript.lua
8. The breakpoint should hit and freeze the instance (B)

=========================================================================
vimspector configuration                           *lua-debug-vimspector*

>json
  {
    "$schema": "https://puremourning.github.io/vimspector/schema/vimspector.schema.json#",
    "adapters": {
      "nlua": {
	"host": "127.0.0.1",
	"port": "8086"
      }
    },

    "configurations": {
      "osv": {
	"adapter": "nlua",
	"configuration": {
	  "request": "attach"
	}
      }
    }
  }
<

=========================================================================
Launch server                                               *osv-server*

To start a debugging session, you will first need to launch the server.

launch({opts})                                           *osv.launch()*
    This command will launch the DAP server awaiting any connections. Upon
    execution, a prompt message will display the port it's running on.

    Parameters: ~
      • {opts}  Optional parameters.
                • `host`         Defaults to "127.0.0.1".
                • `port`         Specify a port number. If nil, the server will choose it.
                • `config_file`  Specify a configuration file used when spawning nvim.
                • `log`          (bool) Enable logging.
                • `recursive`    (bool) If true, will not check for recursive launch
                               calls (default is false).
                • `blocking`     (bool) If true, will freeze the instance until a
                               client is connected (default is false)
                • `output`       (bool) Capture and report nvim output/messages in
                               the debuggee (default is true). Note: This is
                               implemented via |:redir| internally. See
                               |:redir| for caveats.

    Return: ~
        A server info object which contains `{ host = host, port = port }`, or
        `nil` on failure

The |osv.launch()| function will run the debug adapter server in a child
process. This ensures that DAP requests are still processed even in a frozen
state.

run_this({opts})                                        *osv.run_this()*
    This command will automatically start the DAP server and connect nvim-dap
    to it. You still need to set the `dap.adapters.nlua` as explained in the
    configuration section.

    Parameters: ~
      • {opts} Optional parameters.
               • `config_file`  (string) See |osv.launch()|.
               • `log`          (bool) Enable logging.
               • `output`       (bool) See |osv.launch()|.


stop()                                                     *osv.stop()*
    This command will stop the running dap server. Following the DAP standard,
    an "exited" event + a "terminated" event will be sent to the client so
    that it knows the server has exited.

start_trace()						*osv.start_trace()*
    Start a tracing session which records every line that gets executed in the
    current Neovim instance. Stop it with |osv.stop_trace()|.

stop_trace()						*osv.stop_trace()*
    Stop the tracing session.

    Return: ~
	A dictionary with the source path as key and a table
	for each key with the executed line numbers.

is_running()						*osv.is_running()*
    Checks whether |osv| is currently running.

    Return: ~
	True if osv is running.


=========================================================================
osv callbacks                                             *osv-callbacks*

Certain default bevahviours can be overriden using callbacks.  All callbacks
are stored in the `on` table. If no function is assigned, the default
bevahiour is executed, otherwise the callback will be called instead. Only one
callback can be assigned to an action.

For example:
>lua
    require"osv".on["action"] = function(...)
    end

The `start_server` event is called when osv starts the headless instance for
the DAP server. The default behaviour is:
>lua
    require"osv".on["start_server"] = function(args, env)
      return vim.fn.jobstart(args, {rpc = true, env = env})
    end
<

=========================================================================
osv logging                                                 *osv-logging*

Logging can be enabled by passing the corresponding parameter in
|osv.launch|. The log will be written in:
>lua
    vim.fn.stdpath('data') .. '/osv.log'
<

=========================================================================
init.lua debugging                                        *osv-init-debug*

To debug the `init.lua` configuration file, you'll need to take a few
additional steps to start the debugger at launch.

1. Add the following code near the top of your `init.lua`:
>lua
    if init_debug then
      require"osv".launch({port=8086, blocking=true})
    end
<
When the global variable init_debug is set to true, this will launch a
debugging server from the `init.lua` file. The blocking flag will pause the
instance, waiting for a client connection.

2. Launch the debuggee instance with:
>sh
    nvim --cmd "lua init_debug=true"

The instance should freeze immediately.

3. Open another Neovim instance as you normally would. Set a breakpoint in
`init.lua` and connect to the debugged instance using the DAP client.
Execution should resume until it reaches the breakpoint, allowing you to
step through the `init.lua` code.


=========================================================================
osv plugins debugging                             *osv-plugins-debugging

Note: These explanations only are valid if you're using packer.nvim. For
other plugin managers such as vim-plug, you don't need to take any special
precautions to debug plugins.

As an example, let's say you're developing a plugin which is located
in a directory on your system. You would install it using:
>lua
    use '...path to your plugin.../my-plugin.nvim'
<
After installing `my-plugin.nvim` using packer.nvim, a symlink will be created
inside the `nvim-data`  which points to your local plugin directory.

The symlink is located in `nvim-data/pack/packer/start/my-plugin.nvim`.  See
`:echo stdpath('data')` to check where your `nvim-data` directory is located.

When your plugin is executed from within nvim, it won't call the files
located inside your local directory but go through the symlink.

This means that breakpoints should also be set in the files which are
located inside the symlink so that executed files and the files which
contain breakpoints match and stop on trigger.

In consequence, reopen the files through the symlink and place the breakpoints
there to properly trigger them.


=========================================================================
osv repl                                                      *osv-repl*

The REPL supports evaluation of expression. It will prepend a "return "
statement which will return the value of the expression to the debugger.
This means expressions such as assignments will not be valid syntax.


 vim:tw=78:ts=8:ft=help:norl:
